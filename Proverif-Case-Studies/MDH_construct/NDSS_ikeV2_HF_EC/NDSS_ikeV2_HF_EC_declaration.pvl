set verboseDestructors = true.
set reconstructTrace = true.

channel c.

(** Types *)
type G.
type t_exponent.
type t_sk.
type t_pk.
type t_key.
fun G2key(G): t_key [typeConverter].
fun G2bs(G): bitstring [typeConverter].
fun pk2bs(t_pk): bitstring [typeConverter].

(** DH exponentiation (fixed base element 'g') *)
const g: G.
const badElement:t_exponent.
const weak:G.
(* We model weak DH groups as in [2] *)
fun exp_ideal(G, t_exponent): G.
equation forall y: t_exponent, z: t_exponent; exp_ideal(exp_ideal(g,y),z) = exp_ideal(exp_ideal(g,z),y).
fun exp(G, t_exponent): G
reduc      forall a:G, y:t_exponent; exp(a,badElement) = weak
otherwise  forall a:G, y:t_exponent; exp(weak,y) = weak
otherwise  forall a:G, y:t_exponent; exp(a,y) = exp_ideal(a,y).

(** Signature *)
fun sign(bitstring,t_sk):bitstring.
fun pk(t_sk):t_pk.
fun getmsg(bitstring):bitstring
reduc forall m:bitstring, sk:t_sk; getmsg(sign(m,sk)) = m.

fun signCheck(bitstring, t_pk): bool
reduc forall m:bitstring, sk:t_sk; signCheck(sign(m,sk), pk(sk)) = true
      otherwise forall s:bitstring, pkS:t_pk; signCheck(s, pkS) = false.

(** MAC and KDF *)
fun MAC(bitstring, t_key): bitstring.
fun KDF(G, bitstring, nat): t_key.  (* Third argument can be 1,2,3, or 4 to get k1, k2, k3, or k4. *)

(** Encryption *)
fun senc(bitstring, t_key):bitstring.
reduc forall m: bitstring, k:t_key; sdec(senc(m,k),k) = m.

(** Security goals *)
(* Events *)
event Dishonest(t_pk).
event acceptA(t_pk,t_pk,bitstring,bitstring).
event sessionKeyA(t_pk,t_pk,t_key).
event initA(t_pk,t_pk,bitstring,bitstring).
event acceptB(t_pk,t_pk,bitstring,bitstring).
event initA2(t_pk,t_pk,bitstring,bitstring,bitstring).
event acceptB2(t_pk,t_pk,bitstring,bitstring,bitstring).
event sessionKeyB(t_pk,t_pk,t_key).
event initB(t_pk,t_pk,bitstring,bitstring).
event SanityA(bitstring).
event SanityB(bitstring).


query A:t_pk,B:t_pk,B':t_pk,h,h',x,x':bitstring,y:bitstring,y':bitstring,k:t_key;

(* Agreement on (A,B,nA,nB) from A to B. (violated as there is no agreement on B yet) *)
event(acceptB(B,A,x,y)) ==> (event(initA(A,B,x,y')) || event(Dishonest(B)) || event(Dishonest(A)));
(* Agreement on (A,B,nA,nB) from B to A. (holds) *)
event(acceptA(A,B,x,y)) ==> (event(initB(B,A,x,y')) || event(Dishonest(A)) || event(Dishonest(B)));
(* Agreement on (A,nA,nB) and authentication of B from A to B. (holds) *)
event(acceptB(B,A,x,y)) ==> (event(initA(A,B',x,y')) || event(Dishonest(B)) || event(Dishonest(A)));

(* Agreement on (A,B,m1,m2) from A to B. (violated as there is no agreement on B yet) *)
event(acceptB(B,A,x,y)) ==> ((event(initA(A,B,x,y')) && eq_hash(y,y')) || event(Dishonest(B)) || event(Dishonest(A)));
(* Agreement on (A,B,m1,m2) from B to A. (holds) *)
event(acceptA(A,B,x,y)) ==> ((event(initB(B,A,x,y'))  && eq_hash(y,y')) || event(Dishonest(A)) || event(Dishonest(B)));
(* Agreement on (A,m1,m2) and authentication of B from A to B. (violated, A has not authenticated B's y yet) *)
event(acceptB(B,A,x,y)) ==> ((event(initA(A,B',x,y))   && eq_hash(y,y')) || event(Dishonest(B)) || event(Dishonest(A)));

(* Session key secrecy (between honest agents). (holds) *)
(event(sessionKeyA(B,A,k)) && attacker(k)) ==> (event(Dishonest(B)) || event(Dishonest(A)));

(event(sessionKeyB(B,A,k)) && attacker(k)) ==> (event(Dishonest(B)) || event(Dishonest(A)));

 event(acceptB2(B,A,x,y,h)) ==> ((event(initA2(A,B',x',y',h')) && eq_hash(h,h')) || event(Dishonest(B)) || event(Dishonest(A)));

(* Sanity check: executability (holds) *)
event(SanityA(x));
event(SanityB(x)).

const SA_INIT:bitstring.
const AUTH:bitstring.
const noCookie:bitstring.

(** Role models *)
const initTag:bitstring.
const respTag:bitstring.
letfun init = initTag.
letfun resp = respTag.

def macro_IKE(eq_hash_pred,System) {

  (* Compared to the NDSS'16 paper, we use A/B instead of I/R. *)
  let process_A(skA:t_sk, pkB:t_pk) =
     let pkA:t_pk = pk(skA) in
     if pk(skA) <> pkB then (* To avoid a reflection attack that violates agreement A --> B without a weak hash function *)
     new SA_A:bitstring;
     new x: t_exponent;
     new nA: bitstring;
     new infoA:bitstring;
     let m0:bitstring = (SA_INIT,(SA_A,(exp(g,x),(nA,infoA)))) in
     out(c, m0);
     in(c, (=SA_INIT,ck:bitstring)); (* Not used if A does not receive a cookie (m2 can be any message then). *)

     let m1 = (SA_INIT,(ck,(SA_A,(exp(g,x),(nA,infoA))))) in
     out(c,m1);

     in(c, m2:bitstring);                                     (* m2: [SA_INIT, SA_B, exp(g,y), nB, infoB] *)
     let (=SA_INIT, (SA_B:bitstring, (gy:G, (nB:bitstring, infoB:bitstring)))) = m2 in

     let k1:t_key = KDF(exp(gy,x),(nA,nB),1) in
     let k2:t_key = KDF(exp(gy,x),(nA,nB),2) in
     let kA:t_key = KDF(exp(gy,x),(nA,nB),3) in
     let kB:t_key = KDF(exp(gy,x),(nA,nB),4) in
     let macA:bitstring = MAC(pk2bs(pkA), kA) in
     let macB:bitstring = MAC(pk2bs(pkB), kB) in
     let transcriptA:bitstring = (m1,(nB,macA)) in
     let hA = buildH(transcriptA) in

     if gy <> g && not(isCol(G2bs(gy))) then
     event initA(pk(skA),pkB,(nA,nB), (m1,m2) );
     event initA2(pk(skA),pkB,(nA,nB), (m1,m2),hA);

     out(c, senc((AUTH,pkA,sign(hA, skA)), k1));

     in(c, cipher:bitstring);
     let (=AUTH,=pkB,sm:bitstring) = sdec(cipher, k2) in
     let transcriptB:bitstring = (m2, (nA,macB)) in
     let hB:bitstring = buildH(transcriptB) in
     if signCheck(sm,pkB) then
     let hB':bitstring = getmsg(sm) in
     if eq_hash_pred(hB,hB') then
        event acceptA(pk(skA),pkB,(nA,nB),(m1,m2));
        event sessionKeyA(pk(skA),pkB,k1 );
        event SanityA((m1,m2)).

  let process_B(skB:t_sk, pkA:t_pk) =
     let pkB:t_pk = pk(skB) in
     if pk(skB) <> pkA then (* To avoid a reflection attack *)

     in(c, m0:bitstring);
     let (=SA_INIT,(SA_A:bitstring, (gx:G, (nA:bitstring,infoA:bitstring)))) = m0 in

     new ck[]:bitstring;
     out(c, (SA_INIT,ck)); (* B always send a cookie WLOG. *)

     in(c,m1:bitstring);
     let (=SA_INIT,(ck':bitstring,(=SA_A, (=gx, (=nA,=infoA))))) = m1 in

     if gx <> g && not(isCol(G2bs(gx))) then
     new SA_B[]:bitstring;
     new y[]: t_exponent;
     new nB[]: bitstring;
     new infoB[]:bitstring;
     let m2:bitstring = (SA_INIT, (SA_B, (exp(g,y), (nB, infoB)))) in  (* m2: [SA_INIT, SA_B, exp(g,y), nB, infoB] *)
     event initB(pk(skB),pkA, (nA,nB),(m1,m2));
     out(c, m2);

     let k1:t_key = KDF(exp(gx,y),(nA,nB),1) in
     let k2:t_key = KDF(exp(gx,y),(nA,nB),2) in
     let kA:t_key = KDF(exp(gx,y),(nA,nB),3) in
     let kB:t_key = KDF(exp(gx,y),(nA,nB),4) in
     let macA:bitstring = MAC(pk2bs(pkA), kA) in
     let macB:bitstring = MAC(pk2bs(pkB), kB) in

     in(c, cipher:bitstring);                                    (* m3 = [AUTH,pkA,{trA}skA]^k1 *)


     let transcriptA:bitstring = (m1,(nB,macA)) in
     let hA = buildH(transcriptA) in

     let (=AUTH,=pkA,sm:bitstring) = sdec(cipher, k1) in

     if signCheck(sm,pkA) then
     let hA' = getmsg(sm) in
     if eq_hash_pred(hA,hA') then

     let transcriptB:bitstring = (m2, (nA, macB)) in
     out(c, senc((AUTH,pkB,sign(buildH(transcriptB), skB)), k2));
     event acceptB(pk(skB),pkA, (nA,nB), (m1,m2) );
     event acceptB2(pk(skB),pkA, (nA,nB), (m1,m2), hA );
     event sessionKeyB(pk(skB),pkA, k1 );
     event SanityB((m1,m2)).

  table Keys(t_sk).

  let System =
      ! (new sk:t_sk;
         out(c, pk(sk));
         insert Keys(sk))
    | ! (get Keys(skA:t_sk) in
         get Keys(skB:t_sk) in
         (  process_A(skA, pk(skB))
          | process_B(skB, pk(skA))))
    | ! (get Keys(sk:t_sk) in
         event Dishonest(pk(sk));
         out(c,sk)).
}

(* [1] Transcript Collision Attacks: Breaking Authentication in TLS, IKE, and SSH. Bhargavan and Leurent. NDSS'16.
   [2] Bhargavan, Karthikeyan, Bruno Blanchet, and Nadim Kobeissi. Verified models and reference implementations for the TLS 1.3 standard candidate. SP'17 *)
