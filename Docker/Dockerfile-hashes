FROM ocaml/opam as build-ocaml
# MAINTAINER Protocol Platform <protocolplatform@protonmail.com>
USER root
RUN opam install -y ocamlfind ocamlbuild

ENV RES="Docker/res"

WORKDIR /opt/build

# ENV CONFIG="etc/docker/config"
ENV PROVERIF_TGZ="proverif-compfun.zip"
ENV PROVERIF_DIR_NAME="proverif"

# Install our custom proverif
COPY ${RES}/${PROVERIF_TGZ} ${PROVERIF_DIR_NAME}/
RUN cd ${PROVERIF_DIR_NAME} && unzip ${PROVERIF_TGZ} && rm ${PROVERIF_TGZ}

# Note: installation will fail because of lacking libgtk, but still produce the binary :D
# Note: need to run bash so the .bashrc sets the environment variables and ocamlfind can be found
RUN eval `opam config env` && cd ${PROVERIF_DIR_NAME} && ./build; test -x proverif


# Base image for stack build so compiled artifact from previous
# stage should run
FROM tamarin-prover/tamarin
USER root
RUN mkdir -p /opt/hashes
WORKDIR /opt/hashes

RUN apt-get update && apt-get install -y --no-install-recommends \
    #general stuff
    libncurses5 \ 
    python3 \
    python3-numpy \
    make \
    bc \
    locales \
    m4 \
    less \
    && rm -rf /var/lib/apt/lists/*

# set locales so haskell can do its thing
# https://stackoverflow.com/questions/28405902/how-to-set-the-locale-inside-a-debian-ubuntu-docker-container
# The following does NOT work -> locale-gen --no-purge en_US.UTF-8
RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && locale-gen
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# TODO turn variables above into ARGS ..
# https://stackoverflow.com/questions/52904847/how-do-i-copy-variables-between-stages-of-multi-stage-docker-build
ENV PROVERIF_DIR_NAME="proverif"

#ENV RES="etc/docker/res"
#ENV CONFIG="etc/docker/config"

ENV RES="Docker/res"

# Install third party tools
COPY --from=build-ocaml /opt/build/${PROVERIF_DIR_NAME}/proverif /opt/build/bin/

# # Install new maude maude version (not necessary, part of tamarin docker)
# ENV PRELUDE_MAUDE="${RES}/prelude.maude"
# ENV MAUDE="${RES}/maude"
# COPY ${MAUDE} /opt/build/bin/
# COPY ${PRELUDE_MAUDE} /opt/build/bin/

# COPY ${RES}/proverif-tamarin .
# COPY ${RES}/progsverif-tamarin .
# COPY ${RES}/deepsec-tamarin .
# COPY ${RES}/proverif-tamarin-diff .

COPY Tamarin-Case-Studies Tamarin-Case-Studies
COPY Proverif-Case-Studies Proverif-Case-Studies

# ENV EXPORT=examples/sapic/export/ExistingSapicModels
# COPY ${EXPORT}/AC.spthy ${EXPORT}/AC_counter_with_attack.spthy ${EXPORT}/AC_sid_with_attack.spthy ${EXPORT}/AKE.spthy ${EXPORT}/OTP.spthy ${EXPORT}/nsl-no_as-untagged.spthy examples/ExistingSapicModels/
# COPY examples/sapic/fast examples/fast
# COPY examples/sapic/slow examples/slow
# COPY ${RES}/README ${RES}/README-long ${RES}/.bashrc ./
COPY ${RES}/README-hashes ${RES}/.bashrc ./

ENV PATH=${PATH}:/opt/build/bin
# TODO Do we need this???
# ENV DEEPSEC_DIR=$DEEPSEC_DIR_IMAGE/deepsec

EXPOSE 3001
ENTRYPOINT [] # remove entrypoint from parent image 
CMD ["cat", "/opt/hashes/README-hashes"]
